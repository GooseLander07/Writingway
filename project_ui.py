#!/usr/bin/env python3
from PyQt5.QtWidgets import (
    QSplitter, QTreeWidget, QTextEdit, QToolBar, QAction, QWidget, QVBoxLayout,
    QHBoxLayout, QPushButton, QComboBox, QStackedWidget, QFontComboBox, QLabel
)
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
from context_panel import ContextPanel


def build_main_ui(window):
    window.setStatusBar(window.statusBar())
    toolbar = QToolBar("Main Toolbar")
    window.addToolBar(toolbar)
    compendium_action = QAction(
        QIcon("assets/icons/book.svg"), "Compendium", window)
    compendium_action.setStatusTip(
        "Opens the Compendium, to view and edit your worldbuilding database")
    compendium_action.triggered.connect(window.open_compendium)
    toolbar.addAction(compendium_action)
    prompt_options_action = QAction(
        QIcon("assets/icons/settings.svg"), "Prompt Options", window)
    prompt_options_action.setStatusTip(
        "Configure your writing prompts and LLM settings")
    prompt_options_action.triggered.connect(window.open_prompts_window)
    toolbar.addAction(prompt_options_action)
    workshop_action = QAction(
        QIcon("assets/icons/message-square.svg"), "Workshop", window)
    workshop_action.setStatusTip(
        "Opens the Workshop Chat, where you can chat directly with your chosen LLM")
    workshop_action.triggered.connect(window.open_workshop)
    toolbar.addAction(workshop_action)
    focus_mode_action = QAction(
        QIcon("assets/icons/maximize-2.svg"), "Focus Mode", window)
    focus_mode_action.setStatusTip(
        "Press button or F11 to enter Focus Mode, F12 to cycle through images")
    focus_mode_action.triggered.connect(window.open_focus_mode)
    toolbar.addAction(focus_mode_action)
    main_splitter = QSplitter(Qt.Horizontal)
    window.tree = QTreeWidget()
    window.tree.setHeaderLabel("Project Structure")
    window.tree.setContextMenuPolicy(Qt.CustomContextMenu)
    window.tree.customContextMenuRequested.connect(
        window.show_tree_context_menu)
    window.populate_tree()
    window.tree.currentItemChanged.connect(window.tree_item_changed)
    main_splitter.addWidget(window.tree)
    top_right = QWidget()
    top_right_layout = QVBoxLayout(top_right)
    window.formatting_toolbar = QHBoxLayout()
    bold_button = QPushButton()
    bold_button.setCheckable(True)
    bold_button.setIcon(QIcon("assets/icons/bold.svg"))
    bold_button.setToolTip("Bold")
    bold_button.clicked.connect(window.toggle_bold)
    window.formatting_toolbar.addWidget(bold_button)
    italic_button = QPushButton()
    italic_button.setCheckable(True)
    italic_button.setIcon(QIcon("assets/icons/italic.svg"))
    italic_button.setToolTip("Italic")
    italic_button.clicked.connect(window.toggle_italic)
    window.formatting_toolbar.addWidget(italic_button)
    underline_button = QPushButton()
    underline_button.setCheckable(True)
    underline_button.setIcon(QIcon("assets/icons/underline.svg"))
    underline_button.setToolTip("Underline")
    underline_button.clicked.connect(window.toggle_underline)
    window.formatting_toolbar.addWidget(underline_button)
    window.tts_button = QPushButton()
    window.tts_button.setIcon(QIcon("assets/icons/play-circle.svg"))
    window.tts_button.setToolTip("Play TTS (or Stop if playing)")
    window.tts_button.clicked.connect(window.toggle_tts)
    window.formatting_toolbar.addWidget(window.tts_button)
    align_left_button = QPushButton()
    align_left_button.setIcon(QIcon("assets/icons/align-left.svg"))
    align_left_button.setToolTip("Align text to the left")
    align_left_button.clicked.connect(window.align_left)
    window.formatting_toolbar.addWidget(align_left_button)
    align_center_button = QPushButton()
    align_center_button.setIcon(QIcon("assets/icons/align-center.svg"))
    align_center_button.setToolTip("Center align text")
    align_center_button.clicked.connect(window.align_center)
    window.formatting_toolbar.addWidget(align_center_button)
    align_right_button = QPushButton()
    align_right_button.setIcon(QIcon("assets/icons/align-right.svg"))
    align_right_button.setToolTip("Align text to the right")
    align_right_button.clicked.connect(window.align_right)
    window.formatting_toolbar.addWidget(align_right_button)
    font_combo = QFontComboBox()
    font_combo.setToolTip("Select a font")
    font_combo.currentFontChanged.connect(
        lambda font: window.editor.setCurrentFont(font))
    window.formatting_toolbar.addWidget(font_combo)
    font_size_combo = QComboBox()
    font_sizes = [10, 12, 14, 16, 18, 20, 24, 28, 32]
    for size in font_sizes:
        font_size_combo.addItem(str(size))
    font_size_combo.setCurrentText("12")
    font_size_combo.setToolTip("Select font size")
    font_size_combo.currentIndexChanged.connect(
        lambda: window.set_font_size(int(font_size_combo.currentText())))
    window.formatting_toolbar.addWidget(font_size_combo)
    window.formatting_toolbar.addStretch()
    top_right_layout.addLayout(window.formatting_toolbar)
    window.editor = QTextEdit()
    window.editor.setPlaceholderText("Select a node to edit its content...")
    top_right_layout.addWidget(window.editor)
    window.editor.setContextMenuPolicy(Qt.CustomContextMenu)
    window.editor.customContextMenuRequested.connect(
        window.show_editor_context_menu)
    window.scene_settings_toolbar = QWidget()
    scene_settings_layout = QHBoxLayout(window.scene_settings_toolbar)
    save_group = QWidget()
    save_layout = QHBoxLayout(save_group)
    window.manual_save_button = QPushButton("Manual Save")
    window.manual_save_button.setToolTip("Manually save the current scene")
    window.manual_save_button.clicked.connect(window.manual_save_scene)
    save_layout.addWidget(window.manual_save_button)
    window.oh_shit_button = QPushButton("Oh Shit")
    window.oh_shit_button.setToolTip("Show backup versions for this scene")
    window.oh_shit_button.clicked.connect(window.on_oh_shit)
    save_layout.addWidget(window.oh_shit_button)
    save_layout.addStretch()

    # Updated dropdowns for Perspective, Character, and Tense with placeholders.
    pov_group = QWidget()
    pov_layout = QHBoxLayout(pov_group)

    # Perspective dropdown
    window.pov_combo = QComboBox()
    window.pov_combo.setEditable(True)
    window.pov_combo.lineEdit().setReadOnly(True)
    window.pov_combo.lineEdit().setPlaceholderText("Perspective")
    pov_options = ["First Person", "Omniscient",
                   "Third Person Limited", "Custom..."]
    for option in pov_options:
        window.pov_combo.addItem(option)
    window.pov_combo.setCurrentIndex(-1)
    window.pov_combo.setToolTip("Select Perspective")
    window.pov_combo.currentIndexChanged.connect(window.handle_pov_change)
    pov_layout.addWidget(window.pov_combo)

    # Character dropdown with increased minimum width
    window.pov_character_combo = QComboBox()
    window.pov_character_combo.setEditable(True)
    window.pov_character_combo.lineEdit().setReadOnly(True)
    window.pov_character_combo.lineEdit().setPlaceholderText("Character")
    window.pov_character_combo.setMinimumWidth(150)
    pov_character_options = ["Alice", "Bob", "Charlie", "Custom..."]
    for option in pov_character_options:
        window.pov_character_combo.addItem(option)
    window.pov_character_combo.setCurrentIndex(-1)
    window.pov_character_combo.setToolTip("Select POV Character")
    window.pov_character_combo.currentIndexChanged.connect(
        window.handle_pov_character_change)
    pov_layout.addWidget(window.pov_character_combo)

    # Tense dropdown
    window.tense_combo = QComboBox()
    window.tense_combo.setEditable(True)
    window.tense_combo.lineEdit().setReadOnly(True)
    window.tense_combo.lineEdit().setPlaceholderText("Tense")
    tense_options = ["Past Tense", "Present Tense", "Custom..."]
    for option in tense_options:
        window.tense_combo.addItem(option)
    window.tense_combo.setCurrentIndex(-1)
    window.tense_combo.setToolTip("Select Tense")
    window.tense_combo.currentIndexChanged.connect(window.handle_tense_change)
    pov_layout.addWidget(window.tense_combo)

    pov_layout.addStretch()
    scene_settings_layout.addWidget(save_group)
    scene_settings_layout.addSpacing(20)
    scene_settings_layout.addWidget(pov_group)
    scene_settings_layout.addStretch()
    top_right_layout.addWidget(window.scene_settings_toolbar)
    window.bottom_stack = QStackedWidget()
    window.summary_panel = QWidget()
    summary_layout = QHBoxLayout(window.summary_panel)
    summary_layout.addStretch()
    window.create_summary_button = QPushButton("Create Summary")
    window.create_summary_button.clicked.connect(window.create_summary)
    summary_layout.addWidget(window.create_summary_button)
    window.save_summary_button = QPushButton("Save Summary")
    window.save_summary_button.clicked.connect(window.save_summary)
    summary_layout.addWidget(window.save_summary_button)
    summary_layout.addStretch()
    window.llm_panel = QWidget()
    llm_layout = QVBoxLayout(window.llm_panel)
    input_context_layout = QHBoxLayout()
    left_container = QWidget()
    left_layout = QVBoxLayout(left_container)
    window.prompt_input = QTextEdit()
    window.prompt_input.setPlaceholderText("Enter your action beats here...")
    window.prompt_input.setMinimumHeight(100)
    left_layout.addWidget(window.prompt_input)
    # Create a horizontal layout for buttons and add it to left_layout instead of reassigning to left_container.
    left_buttons_layout = QHBoxLayout()
    left_layout.addLayout(left_buttons_layout)
    window.prompt_dropdown = QComboBox()
    window.prompt_dropdown.setToolTip("Select a prose prompt")
    window.prompt_dropdown.addItem("Select Prose Prompt")
    window.prompt_dropdown.currentIndexChanged.connect(
        window.prompt_dropdown_changed)
    left_buttons_layout.addWidget(window.prompt_dropdown)
    # Create the Send button
    window.send_button = QPushButton("Send")
    window.send_button.setToolTip("Send the prompt to the LLM")
    window.send_button.clicked.connect(window.send_prompt)
    left_buttons_layout.addWidget(window.send_button)
    window.context_toggle_button = QPushButton("Context")
    window.context_toggle_button.setToolTip("Show extra context settings")
    window.context_toggle_button.setCheckable(True)
    window.context_toggle_button.clicked.connect(window.toggle_context_panel)
    left_buttons_layout.addWidget(window.context_toggle_button)
    # NEW: Model indicator label
    window.model_indicator = QLabel("")
    window.model_indicator.setStyleSheet(
        "font-weight: bold; padding-left: 10px;")
    window.model_indicator.setToolTip("Selected prompt's model")
    left_buttons_layout.addWidget(window.model_indicator)
    left_buttons_layout.addStretch()
    left_layout.addStretch()
    input_context_layout.addWidget(left_container, stretch=2)
    window.context_panel = ContextPanel(window.structure, window.project_name)
    window.context_panel.setVisible(False)
    input_context_layout.addWidget(window.context_panel, stretch=1)
    llm_layout.addLayout(input_context_layout)
    window.preview_text = QTextEdit()
    window.preview_text.setReadOnly(True)
    window.preview_text.setPlaceholderText(
        "LLM output preview will appear here...")
    llm_layout.addWidget(window.preview_text)
    button_layout = QHBoxLayout()
    window.apply_button = QPushButton("Apply")
    window.apply_button.setToolTip("Append the preview text to the scene")
    window.apply_button.clicked.connect(window.apply_preview)
    button_layout.addWidget(window.apply_button)
    window.retry_button = QPushButton("Retry")
    window.retry_button.setToolTip("Clear preview and re-send the prompt")
    window.retry_button.clicked.connect(window.retry_prompt)
    button_layout.addWidget(window.retry_button)
    button_layout.addStretch()
    llm_layout.addLayout(button_layout)
    window.bottom_stack.addWidget(window.summary_panel)
    window.bottom_stack.addWidget(window.llm_panel)
    right_splitter = QSplitter(Qt.Vertical)
    right_splitter.addWidget(top_right)
    right_splitter.addWidget(window.bottom_stack)
    right_splitter.setStretchFactor(0, 3)
    right_splitter.setStretchFactor(1, 1)
    main_splitter.addWidget(right_splitter)
    main_splitter.setStretchFactor(1, 1)
    window.setCentralWidget(main_splitter)
